## 1장 깨끗한 코드

깨끗하지 않은, 나쁜 코드들은 회사를 망하게 할 수도 있다.<br>
처음에는 빠른 개발이 가능할 수 있으나, 점점 나쁜 코드로 인해 효율이 떨어지게 된다.<br>
그렇다면 어떤 코드가 깨끗한 코드라고 볼 수 있을까?<br>
정답이 정해진 질문은 아니지만 여러 유명 프로그래머의 말을 종합하면 아래와 같다.<br>
1. 단순하고 직접적이며 중복이 없는 코드
2. 의존성이 적고 그 의존성을 명확히 정의한 코드.
3. 누구나 읽기 쉬운 코드.
<br>
개발을 하다보면 새 코드를 짜기 위해 끊임없이 기존 코드를 읽는다. 그래서 코드를 짜는 것보다 코드를 읽는 것에 훨씬 더 많은 시간을 할애하게 된다.<br>
개발하는 순간 뿐만 아니라 계속적으로 깨끗한 코드를 유지하기 위해 노력해야한다.<br>

<hr>

## 2장 의미있는 이름

개발을 하다보면 이름을 짓는 경우가 많다.<br>
변수, 메소드, 클래스 뿐만 아니라 디렉터리, 파일명 등 이름을 지어야 하는 순간이 정말 많다. <br>
나쁜 이름도 나쁜 코드의 일부가 되므로 좋은 이름을 짓도록 노력해야한다.<br>
2장에서는 좋은 이름을 짓는 규칙에 대해 설명하고 있고, 정리하면 아래와 같다.<br>

1. 의미가 명확한 이름을 사용하라
    - 누가 봐도 명확히 알 수 있는 이름을 쓰자
    - 6개월 뒤의 내가, 3년뒤 후배가 보더라도 파악할 수 있는 이름을 사용하자
2. 검색하기 쉬운 이름을 사용하라
    - 횟수에 대한 변수를 모두 count라고 지었다면 검색시 수 많은 count들이 나오게 될것이고 찾는데 시간을 들이게 된다.
    - 이름은 코드, 커밋메세지, 로그 등 다양한 곳에서 검색을 할 수 있기 때문에 검색하기 쉬운 이름이 좋다.
3. 한 개념에 한 단어를 사용하라
    - 한 개념에 뜻이 같은 여러 단어들이 있다면 하나의 단어만 선택하여 쓰는 것이 좋다.
    - 같은 뜻의 단어여도 코드를 접하는 사람은 의미가 같은지 의심하게 된다.
4. 이 코드를 읽을 사람도 같은 일을 하는 프로그래머임을 인지하라
    - 전산용어, 알고리즘등 프로그래머라면 알 수 있는 용어들을 사용하는 것도 좋다.
    - 적절한 프로그래머 용어가 없다면 도메인 관련 용어를 사용해도 좋다.
   
<hr>
   
## 3장 함수

함수도 어떤식으로 짜느냐에 따라 이해하는데 걸리는 시간이 천차만별이다.<br>
그렇다면 함수는 어떤 방식으로 짜야 읽기 쉽고 이해하기 쉬울까?<br>
3장에서는 알려주는 규칙들을 정리하면 아래와 같다.<br>

1. 작게 만들어라! 함수는 한 가지 일만 하면된다. 부수 효과는 필요없다.
	- 함수의 로직은 한 눈에 보이는것이 좋다.
	- 하나의 함수의 너무 많은 코드가 있고 많은 작업을 한다면 이해하기도 어렵고 테스트 하기도 어려울 것이다.
	- 좋을거라고 생각하고 넣은 부수 효과는 다른 개발자에게 예기치 못한 오류를 안겨 줄 수 있다.
2. 함수 당 추상화 수준은 하나로!
	- 추상화 수준을 섞으면 읽는 사람이 헷갈린다.
	- 코드는 위에서 아래로 이야기처럼 읽혀야 좋다. 아래로 코드를 읽다보면 추상화 수준이 낮아지도록 코드를 작성하자
3. switch문
	- switch문은 기본적으로 긴 코드를 작성하게 만든다.
	- 필요하다면 가능한 한번만 사용하도록 하고, 상속을 통해 노출되지 않도록 하는게 좋다.
4. 서술적인 이름을 사용하라
	- 함수명으로 기능을 유추할 수 있도록 이름을 짓자. 길어져도 괜찮다.
	- 명사, 동사 위주로 쓰는 것이 좋고, 일관된 단어를 사용하자
5. 함수 인수 개수
	- 기본적으로 적을 수록 좋다.
	- 여러개의 인수가 필요할 경우 객체로 변수를 받는것이 더 좋다.
6. 오류코드보다 예외를 사용하라
7. 반복하지 마라

